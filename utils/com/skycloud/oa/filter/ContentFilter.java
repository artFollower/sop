package com.skycloud.oa.filter;
import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.image.BufferedImage;import java.io.IOException;import javax.imageio.ImageIO;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.log4j.Logger;import com.skycloud.oa.config.Global;import com.skycloud.oa.utils.Common;/** *  * @author Administrator * */
public class ContentFilter implements Filter {		Logger log = Logger.getLogger(ContentFilter.class);	
	public void init(FilterConfig fc) throws ServletException {
	}	
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,
			ServletException {
				HttpServletRequest request = (HttpServletRequest) req;		HttpServletResponse response = (HttpServletResponse) res;		//		Principal principal = request.getUserPrincipal();//		UsernamePasswordToken token = new UsernamePasswordToken();//		token.setUsername(principal.getName());//		token.setPassword("02d3062dc41c96ad5eada2a9bab11058".toCharArray());//		SecurityUtils.getSubject().login(token);				request.setCharacterEncoding("UTF-8");		//处理分页参数		try {			if(Common.empty(request.getAttribute("currentPage"))) {				request.setAttribute("currentPage", 1);			}		}catch(Exception e) {					}		//初始化全局配置		Global.getInstance().initGlobal(request);		//处理验证码		String ac = request.getParameter("ac");		if ("seccode".equals(ac)) {			doSeccode(request, response);		}else{			chain.doFilter(request,response);		}	}
		private void doSeccode(HttpServletRequest request, HttpServletResponse response) {		String seccode = mkSeccode();		request.getSession().setAttribute("seccode", seccode);		log.debug("-----------------------seccode----------------");		log.debug(seccode);		int width = 100, height = 40;		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);		Graphics g = image.getGraphics();		g.setColor(getRandColor(200, 235));		g.fillRect(0, 0, width, height);		g.setFont(new Font("Times New Roman", Font.BOLD, 22)); 		for (int i = 0; i < 4; i++) {			g.setColor(new Color(20 + Common.rand(110), 20 + Common.rand(110), 20 + Common.rand(110)));			int x = Common.rand(width);			int y = Common.rand(height);			int xl = Common.rand(width);			int yl = Common.rand(height);			g.drawLine(x, y, x + xl, y + yl);		}		for (int i = 0; i < 4; i++) {			char rand = seccode.charAt(i);			g.setColor(getRandColor(10, 150));			g.drawString(String.valueOf(rand), 24 * i + Common.rand(4), 22 + Common.rand(6));		}		g.dispose(); 		try {			response.setContentType("image/JPEG"); 			ImageIO.write(image, "JPEG", response.getOutputStream()); 		} catch (IOException e) {			e.printStackTrace();		}	}	private String mkSeccode() {		int seccode = Integer.parseInt(Common.getRandStr(6, true));		String s = Integer.toString(seccode, 24); 		while (s.length() < 4) {			s = "0" + s;		}		String seccodeUnits = "BCEFGHJKMPQRTVWXY2346789";		StringBuffer secCodeHiddenBuf = new StringBuffer(4);		for (int i = 0; i < 4; i++) {			int unit = s.charAt(i);			if (unit >= 0x30 && unit <= 0x39) {				secCodeHiddenBuf.append(seccodeUnits.charAt(unit - 0x30));			} else {				secCodeHiddenBuf.append(seccodeUnits.charAt(unit - 0x57));			}		}		return secCodeHiddenBuf.toString();	}		private Color getRandColor(int fc, int bc) {		if (fc > 255) {			fc = 255;		}		if (bc > 255) {			bc = 255;		}		int r = fc + Common.rand(bc - fc);		int g = fc + Common.rand(bc - fc);		int b = fc + Common.rand(bc - fc);		return new Color(r, g, b);	}	
	public void destroy() {	}}